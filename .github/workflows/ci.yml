name: CI

on:
  push:
    branches:
      - v1.x
      - ci-test
  pull_request:
    branches:
      - v1.x
  workflow_dispatch:    

defaults:
  run:
    shell: bash

jobs:
  commit-msg:
    name: Commit message check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 100
    - name: Check commit messages
      run: |
        if git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep -q '.\{73\}'; then
          (echo -n "::error::";
           echo "Some commit message summary lines are too long. See CONTRIBUTING.md for more information.";
           echo "Invalid commits:";
           echo;
           git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep '.\{73\}';) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        fi
  clang-format:
    name: Code formatting check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Add LLVM apt repository
      run: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main'
        sudo apt-get update
        curl -LO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
        sudo dpkg -i libffi6_3.2.1-8_amd64.deb
    - name: Install clang-format-3.8
      run: |
        sudo apt-get install -y clang-format-3.8
    - name: Run clang-format-3.8
      run: |
        . ./util/clang_format_all.sh
        git clean -f
    - name: Check formatting
      run: |
        git diff --quiet || (
          (echo -n "::error::";
          echo "clang-format issues were found. See CONTRIBUTING.md for more information.";
          echo;
          git diff;) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        )
  cmake-minimum:
    name: Baseline cmake check
    needs: [commit-msg, clang-format]
    runs-on: ubuntu-20.04
    env:
      QT_SELECT: qt5
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Download minimum supported cmake version
      run: |
        pushd /tmp
        wget https://cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.tar.gz
        tar -zxvf cmake-2.8.12.2-Linux-i386.tar.gz
        popd
    - name: Install compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev mesa-common-dev libgl1-mesa-dev qtbase5-dev libxcb-keysyms1-dev
    - name: Configure renderdoc with cmake
      run: |
        mkdir build
        cd build
        /tmp/cmake-2.8.12.2-Linux-i386/bin/cmake -DCMAKE_BUILD_TYPE=Debug ..
  windows:
    name: Windows
    needs: [commit-msg, clang-format]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ VS2015 x86 Development, VS2015 x64 Development ]
        include:
          - name: VS2015 x86 Development
            os: windows-2019
            compiler: VS2015
            toolset: v140
            platform: x86
            configuration: Development
          - name: VS2015 x64 Development
            os: windows-2019
            compiler: VS2015
            toolset: v140
            platform: x64
            configuration: Development

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Download optional 3rdparty extras
      run: |
        curl https://renderdoc.org/qrenderdoc_3rdparty.zip -O
        7z x qrenderdoc_3rdparty.zip
    - name: Set up Visual Studio tools
      uses: microsoft/setup-msbuild@v1.1
    - name: Building solution
      run: msbuild.exe renderdoc.sln "/m" "/p:Configuration=${{ matrix.configuration }}" "/p:Platform=${{ matrix.platform }}" "/p:PlatformToolset=${{ matrix.toolset }}"
      shell: powershell
    - if: matrix.configuration == 'Development'
      name: Running core unit tests
      run: |
        if ! ./*/Development/renderdoccmd.exe test unit -o test.log; then
          echo "::error::$(cat test.log)" | tr -d '\r' |  tr '\n' '\001' | sed -e 's#\x01#%0D%0A#g';
          exit 1;
        fi
    - if: matrix.configuration == 'Development'
      name: Running UI unit tests
      run: |
        if ! ./*/Development/qrenderdoc.exe --unittest log=test.log; then
          echo "::error::$(cat test.log)" | tr -d '\r' |  tr '\n' '\001' | sed -e 's#\x01#%0D%0A#g';
          exit 1;
        fi
    - uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: D:\a\renderdoc\renderdoc\x64\Development